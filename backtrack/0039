// class Solution {
// public:
//     vector<vector<int> >result;
//     vector<int>path;
//     void backtracking(vector<int>& candidates, int target,int sum,int startindex){
//         if(sum>=target){
//             if(sum==target) result.push_back(path);
//             return;
//         }
//         int len=candidates.size();
//         for(int i=startindex;i<len;i++){
//             path.push_back(candidates[i]);
//             sum+=candidates[i];
//             backtracking(candidates,target,sum,i);
//             sum-=candidates[i];
//             path.pop_back();
//         }
//     }
//     vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
//         // sort(candidates.begin(),candidates.end());
//         // if(candidates.size()==0||candidates[0]>target) return result;
//         backtracking(candidates,target,0,0);
//         return result;
//     }
// };

//剪枝优化
class Solution {
public:
    vector<vector<int> >result;
    vector<int>path;
    void backtracking(vector<int>& candidates, int target,int sum,int startindex){
        if(sum==target){
            result.push_back(path);
            return;
        }
        int len=candidates.size();
        for(int i=startindex;i<len&&sum+candidates[i]<=target;i++){
            path.push_back(candidates[i]);
            sum+=candidates[i];
            backtracking(candidates,target,sum,i);
            sum-=candidates[i];
            path.pop_back();
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        if(candidates.size()==0||candidates[0]>target) return result;
        backtracking(candidates,target,0,0);
        return result;
    }
};
