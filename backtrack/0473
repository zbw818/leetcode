class Solution {
public:
    bool backtracking(vector<int> nums, int index, int k, int targetSum, vector<int>subNumSum){
        if(index==nums.size()){
            return true;
        }
        for(int i=0;i<k;i++){
            //if (i > 0 && index == 0) break;//第一个球放在哪个子集里都一样，默认放在第一个子集里
            if(i>0&&subNumSum[i]==subNumSum[i-1]) continue;
            if(subNumSum[i]+nums[index]>targetSum) continue;
            subNumSum[i]+=nums[index];
            if(backtracking(nums, index+1, k, targetSum, subNumSum)) return true;
            subNumSum[i]-=nums[index];
        }
        return false;
    }
    static bool cmp(int a,int b){
        return a>b;
    }
    bool makesquare(vector<int>& matchsticks) {
        int sum=0;
        for(auto num:matchsticks) sum+=num;
        if(sum%4!=0) return false;
        int targetSum=sum/4;
        vector<int>subNumSum(4);
        sort(matchsticks.begin(),matchsticks.end(),cmp);
        return backtracking(matchsticks, 0, 4, targetSum, subNumSum);
    }
};
