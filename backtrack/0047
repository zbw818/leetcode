class Solution {
public:
    vector<vector<int>>result;
    vector<int>path;
    void backtracking(vector<int>nums,vector<int> used){
        if(path.size()==nums.size()){
            result.push_back(path);
            return;
        }
        for(int i=0;i<nums.size();i++){
            if(i>0&&nums[i]==nums[i-1]&&used[i-1]==0) continue;
            if(used[i]==0){
                used[i]=1;
                path.push_back(nums[i]);
                backtracking(nums,used);
                path.pop_back();
                used[i]=0;
            }
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<int>used(nums.size(),0);
        backtracking(nums,used);
        return result;
    }
};
