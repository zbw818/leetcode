class Solution {
public:
    vector<vector<int> >result;
    vector<int>path;
    void backtracking(vector<int>& candidates, int target,int sum,int startindex){
        if(sum==target){
            result.push_back(path);
            return;
        }
        int len=candidates.size();
        for(int i=startindex;i<len&&sum+candidates[i]<=target;i++){
            if(i>startindex&&candidates[i]==candidates[i-1]) continue;
            sum+=candidates[i];
            path.push_back(candidates[i]);
            backtracking(candidates, target,sum,i+1);
            sum-=candidates[i];
            path.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        if(candidates.size()==0||candidates[0]>target) return result;
        backtracking(candidates, target,0,0);
        return result;
    }
};
