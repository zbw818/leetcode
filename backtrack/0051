class Solution {
public:
    vector<vector<string> >result;
    void backtracking(int n, int row,vector<string>& board){
        if(row==n){
            result.emplace_back(board);
            return;
        }
        for(int col=0;col<n;col++){
            if(isValid(row,col,n,board)){
                board[row][col]='Q';
                backtracking(n,row+1,board);
                board[row][col]='.';
            }
        }
    }
    bool isValid(int row,int col,int n,vector<string>board){
        for(int i=0;i<row;i++){
            if(board[i][col]=='Q') return false;
        }
        for(int i=row-1,j=col-1;i>-1&&j>-1;i--,j--){
            if(board[i][j]=='Q') return false;
        }
        for(int i=row-1,j=col+1;i>-1&&j<n;i--,j++){
            if(board[i][j]=='Q') return false;
        }
        return true;
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<string>board(n,string(n,'.'));
        backtracking(n,0,board);
        return result;
    }
};
