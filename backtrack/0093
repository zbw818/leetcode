class Solution {
public:
    vector<string> result;
    char ch='.';
    void backtracking(string& s,int startindex,int pnum){
        if(pnum==3){
            if(is_ValidIp(s,startindex,s.size()-1)) result.push_back(s);
            return;
        }
        for(int i=startindex;i<s.size();i++){
            if(is_ValidIp(s,startindex,i)){
                s.insert(s.begin()+i+1,ch);
                pnum++;
                backtracking(s,i+2,pnum);
                pnum--;
                s.erase(s.begin()+i+1);
            }
            else break;
        }
    }
    bool is_ValidIp(const string& s,int left,int right){
        if(left>right) return false;
        if(s[left]=='0' && left!=right) return false;
        int num=0;
        for(int i=left;i<=right;i++){
            num=num*10+(s[i]-'0');
            if(num>255||s[i]<'0'||s[i]>'9') return false;
        }
        // int num=0;
        // for(int i=left;i<=right;i++){
        //     num=num*10+(s[i]-'0');
        // }
        // if(num>255) return false;
        //if(stoi(s)>255) return false;
        return true;
    }
    vector<string> restoreIpAddresses(string s) {
        if(s.size()<4||s.size()>12) return result;
        backtracking(s,0,0);
        return result;
    }
};
