class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int left=findleft(nums, target);
        int right=findright(nums, target);
        if(right-left>1){
            return {left+1,right-1};
        }
        return {-1,-1};
        /*不需要遍历容器确认target是否包含在内，因为如果包含，则right-left肯定大于1。
        bool flag = false;
        for(vector<int>::iterator it=m.begin();it!=m.end();it++){
            if(*it==target){
                flag=true;
                break;
            }
        }
        if(flag){
            //m.push_back(left+1);
            //m.push_back(right-1);
            m.push_back(-1);
            m.push_back(-1);
        }
        else{
            m.push_back(left+1);
            m.push_back(right-1);
            //m.push_back(-1);
            //m.push_back(-1);
        }
        return m;
        */
    }

    int findleft(vector<int>& nums, int target){
        int left=0;
        int right=nums.size()-1;
        
        while(left<=right){
            int mid = (left+right)/2;
            if(nums[mid]<target){
                left = mid+1;
            }
            else{
                right = mid-1;
            }
        }
        return right;
    }
    int findright(vector<int>& nums, int target){
        int left=0;
        int right=nums.size()-1;
        while(left<=right){
            int mid = (left+right)/2;
            if(nums[mid]>target){
                right = mid-1;
            }
            else{
                left = mid+1;
            }
        }
        return left;
    }
};
