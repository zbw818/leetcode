//方法一：找到的左边界是目标值左边元素的索引，或者是数组中没有目标值时小于目标值的最大元素的索引；
//       找到的右边界是目标值右边元素的索引，或者是数组中没有目标值时大于目标值的最小元素的索引；所以，如果包含目标值，则右边界减去左边界的值必定大于1，否则表明数组中不包含目标值。不需要遍历容器
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int left=findleft(nums, target);
        int right=findright(nums, target);
        if(right-left>1){
            return {left+1,right-1};
        }
        return {-1,-1};
    }

    int findleft(vector<int>& nums, int target){
        int left=0;
        int right=nums.size()-1;
        
        while(left<=right){
            int mid = (left+right)/2;
            if(nums[mid]<target){
                left = mid+1;
            }
            else{
                right = mid-1;
            }
        }
        return right;
    }
    int findright(vector<int>& nums, int target){
        int left=0;
        int right=nums.size()-1;
        while(left<=right){
            int mid = (left+right)/2;
            if(nums[mid]>target){
                right = mid-1;
            }
            else{
                left = mid+1;
            }
        }
        return left;
    }
};

//方法二：找到的左边界是目标值的最小索引，或者是数组中没有目标值时大于目标值的最小元素的索引；
//       找到的右边界是目标值的最大索引，或者是数组中没有目标值时小于目标值的最大元素的索引；所以，如果不包含目标值，则左边界减去右边界的值必定等于1，否则表明数组中包含目标值。不需要遍历容器
/*
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int left=findleft(nums, target);
        int right=findright(nums, target);
        if(left==right+1){
            return {-1,-1};
        }
        return {left,right};
    }

    int findleft(vector<int>& nums, int target){
        int left=0;
        int right=nums.size()-1;
        
        while(left<=right){
            int mid = (left+right)/2;
            if(nums[mid]<target){
                left = mid+1;
            }
            else{
                right = mid-1;
            }
        }
        return left;
    }
    int findright(vector<int>& nums, int target){
        int left=0;
        int right=nums.size()-1;
        while(left<=right){
            int mid = (left+right)/2;
            if(nums[mid]>target){
                right = mid-1;
            }
            else{
                left = mid+1;
            }
        }
        return right;
    }
};
*/








