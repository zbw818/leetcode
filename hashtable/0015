class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());
        if(nums.size()<3||nums[0]>0||nums[nums.size()-1]<0) return {};
        for(int i=0;i<nums.size();i++){
            if(nums[i]>0) break;
            if(i>0&&nums[i]==nums[i-1]) continue;
            
            unordered_set<int>tem;
            for(int j=i+1;j<nums.size();j++){
                if(j>i+2&&nums[j]==nums[j-1]&&nums[j-1]==nums[j-2]) continue;
                int t=0-nums[i]-nums[j];
                if(tem.find(t)!=tem.end()){
                    result.push_back({nums[i],nums[j],t});
                    tem.erase(t);
                }
                else tem.insert(nums[j]);
            }
        }
        return result;
    }
};

// //精选答案
// class Solution {
// public:
//     vector<vector<int>> threeSum(vector<int>& nums) 
//     {
//         vector<vector<int>> res;
//         sort(nums.begin(),nums.end());  //排序
//         int len=nums.size();
//         int sum=0;
//         for(int k=0;k<len;k++)
//         {
//             if(nums[k]>0) break;  //优化 第一个数大于0 因为升序所以不可能sum0
//             if(k>0&&nums[k]==nums[k-1]) continue;  //优化 当k与k+1相同时，如果有sum0 必定会重复
//             int i=k+1;
//             int j=len-1;
//             sum=0;
//             int only=nums[0]-1;
//             while(i<j)
//             {
//                 sum=nums[k]+nums[i]+nums[j];
//                 if(sum<0)
//                 {
//                     i++;
//                 }
//                 if(sum>0)
//                 {
//                     j--;
//                 }
//                 if(sum==0)
//                 {
//                     if(nums[i]!=only)
//                     {
//                         res.push_back({nums[k],nums[i],nums[j]});
//                         only=nums[i];
//                     }
//                     i++;
//                     j--;
//                 }
//             }

//         }
//         return res;
//     }
// };

// //双指针法
// class Solution {
// public:
//     vector<vector<int>> threeSum(vector<int>& nums) {
//         vector<vector<int>> result;
//         sort(nums.begin(), nums.end());
//         // 找出a + b + c = 0
//         // a = nums[i], b = nums[left], c = nums[right]
//         for (int i = 0; i < nums.size(); i++) {
//             // 排序之后如果第一个元素已经大于零，那么无论如何组合都不可能凑成三元组，直接返回结果就可以了
//             if (nums[i] > 0) {
//                 return result;
//             }
//             // 错误去重方法，将会漏掉-1,-1,2 这种情况
//             /*
//             if (nums[i] == nums[i + 1]) {
//                 continue;
//             }
//             */
//             // 正确去重方法
//             if (i > 0 && nums[i] == nums[i - 1]) {
//                 continue;
//             }
//             int left = i + 1;
//             int right = nums.size() - 1;
//             while (right > left) {
//                 // 去重复逻辑如果放在这里，0，0，0 的情况，可能直接导致 right<=left 了，从而漏掉了 0,0,0 这种三元组
//                 /*
//                 while (right > left && nums[right] == nums[right - 1]) right--;
//                 while (right > left && nums[left] == nums[left + 1]) left++;
//                 */
//                 if (nums[i] + nums[left] + nums[right] > 0) {
//                     right--;
//                     // 当前元素不合适了，可以去重
//                     while (left < right && nums[right] == nums[right + 1]) right--;
//                 } else if (nums[i] + nums[left] + nums[right] < 0) {
//                     left++;
//                     // 不合适，去重
//                     while (left < right && nums[left] == nums[left - 1]) left++;
//                 } else {
//                     result.push_back(vector<int>{nums[i], nums[left], nums[right]});
//                     // 去重逻辑应该放在找到一个三元组之后
//                     while (right > left && nums[right] == nums[right - 1]) right--;
//                     while (right > left && nums[left] == nums[left + 1]) left++;

//                     // 找到答案时，双指针同时收缩
//                     right--;
//                     left++;
//                 }
//             }

//         }
//         return result;
//     }
// };
