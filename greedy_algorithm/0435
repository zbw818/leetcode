// class Solution {
// public:
//     static bool cmp(vector<int>&a,vector<int>&b){
//         return a[0]<b[0];
//     }
//     int eraseOverlapIntervals(vector<vector<int>>& intervals) {
//         sort(intervals.begin(),intervals.end(),cmp);
//         int len=intervals.size();
//         int counter=1;
//         for(int i=1;i<len;i++){
//             if(intervals[i][0]>=intervals[i-1][1]) counter++;
//             else intervals[i][1]=intervals[i-1][1]>intervals[i][1] ? intervals[i][1] : intervals[i-1][1];
//         }
//         return len-counter;
//     }
// };

// class Solution {
// public:
//     static bool cmp(vector<int>&a,vector<int>&b){
//         return a[1]<b[1];
//     }
//     int eraseOverlapIntervals(vector<vector<int>>& intervals) {
//         sort(intervals.begin(),intervals.end(),cmp);
//         int len=intervals.size();
//         int counter=1;
//         int end=intervals[0][1];
//         for(int i=1;i<len;i++){
//             if(intervals[i][0]>=end){
//                 end=intervals[i][1];
//                 counter++;
//             }
//         }
//         return len-counter;
//     }
// };

class Solution {
public:
    static bool cmp(vector<int>&a,vector<int>&b){
        return a[0]<b[0];
    }
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        sort(intervals.begin(),intervals.end(),cmp);
        int len=intervals.size();
        int counter=1;
        int end=intervals[len-1][0];
        for(int i=len-2;i>=0;i--){
            if(intervals[i][1]<=end){
                end=intervals[i][0];
                counter++;
            }
        }
        return len-counter;
    }
};
