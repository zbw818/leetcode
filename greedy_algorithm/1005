// class Solution {
// public:
//     int minvalue_index(vector<int>nums){
//         int minvalue=INT_MAX;
//         int index;
//         for(int i=0;i<nums.size();i++){
//             if(nums[i]<minvalue){
//                 minvalue=nums[i];
//                 index=i;
//             }
//         }
//         return index;
//     }
//     int largestSumAfterKNegations(vector<int>& nums, int k) {
//         int ind;
//         for(int i=0;i<k;i++){
//             ind=minvalue_index(nums);
//             nums[ind]=(-nums[ind]);
//         }
//         int sum=0;
//         for(auto n:nums){
//             sum+=n;
//         }
//         return sum;
//     }
// };

class Solution {
public:
    static bool cmp(int a,int b){
        return abs(a)>abs(b);
    }
    int largestSumAfterKNegations(vector<int>& nums, int k) {
        sort(nums.begin(),nums.end(),cmp);//按照绝对值从小到大排序
        for(int i=0;i<nums.size();i++){
            if(nums[i]<0 && k>0){
                nums[i]=-nums[i];
                k--;
            }
        }
        if(k>0 && k%2==1){
            sort(nums.begin(),nums.end());
            nums[0] *= -1;
        }

        int sum=0;
        for(auto n:nums){
            sum+=n;
        }
        return sum;
    }
};
