// class Solution {
// public:
//     int findMaxForm(vector<string>& strs, int m, int n) {
//         //dp[i][j][k]:在前i个字符串中，0的容量为j和1的容量为k个的情况下最多可以得到的字符串数量
//         vector<vector<vector<int> > >dp(strs.size()+1, vector<vector<int> >(m+1,vector<int>(n+1,0)));
//         for(int i=0;i<strs.size();i++){
//             unordered_map<char,int>um;
//             for(char str:strs[i]){
//                 um[str]++;
//             }
//             int zeroNum=um['0'],oneNum=um['1'];
//             for(int j=0;j<=m;j++){
//                 for(int k=0;k<=n;k++){
//                     dp[i+1][j][k]=dp[i][j][k];
//                     if(j>=zeroNum && k>=oneNum) dp[i+1][j][k]=max(dp[i+1][j][k],dp[i][j-zeroNum][k-oneNum]+1);
//                 }
//             }
//         }
//         return dp[strs.size()][m][n];
//     }
// };

class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        //dp[i][j]:最多有i个0和j个1的strs的最大子集的大小
        vector<vector<int> >dp(m+1,vector<int>(n+1,0));
        for(int i=0;i<strs.size();i++){
            unordered_map<char,int>um;
            for(char str:strs[i]){
                um[str]++;
            }
            int zeroNum=um['0'],oneNum=um['1'];
            //遍历背包容量且从后向前遍历！
            for(int j=m;j>=zeroNum;j--){
                for(int k=n;k>=oneNum;k--){
                    dp[j][k]=max(dp[j][k],dp[j-zeroNum][k-oneNum]+1);
                }
            }

        }
        return dp[m][n];
    }
};
