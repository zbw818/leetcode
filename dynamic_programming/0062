// class Solution {
// public:
//     int uniquePaths(int m, int n) {
//         vector<vector<int> >dp(m,vector<int>(n,0));
//         for(int i=0;i<m;i++) dp[i][0]=1;
//         for(int j=1;j<n;j++) dp[0][j]=1;
//         for(int i=1;i<m;i++){
//             for(int j=1;j<n;j++){
//                 dp[i][j]=dp[i][j-1]+dp[i-1][j];
//             }
//         }
//         return dp[m-1][n-1];
//     }
// };


//排列组合
/*一共m，n的话，无论怎么走，走到终点都需要 m + n - 2 步
在这m + n - 2 步中，一定有 m - 1 步是要向下走的，不用管什么时候向下走。
所以可以转化为，给你m + n - 2个不同的数，随便取m - 1个数*/
class Solution {
public:
    int uniquePaths(int m, int n) {
        int upnum=1,downnum=1;
        int N=m+n-2,K=m-1;
        int step=1;
        while(K--){
            upnum*=(N--);
            downnum*=K;
            step*=(upnum/downnum)
        }
    }
};
