// //dp
// class Solution {
// public:
//     int integerBreak(int n) {
//         if(n<=3) return n-1;
//         vector<int>dp(n+1);
//         dp[2]=1;
//         dp[3]=2;
//         for(int i=4;i<=n;i++){
//             dp[i]=max(i-1,max(max(2*(i-2),2*dp[i-2]),max(3*(i-3),3*dp[i-3])));
//         }
//         return dp[n];
//     }
// };

//贪心
/*每次拆成若干个3，如果剩下是4，则保留4，然后相乘*/
class Solution {
public:
    int integerBreak(int n) {
        if (n == 2) return 1;
        if (n == 3) return 2;
        if (n == 4) return 4;
        int result = 1;
        while (n > 4) {
            result *= 3;
            n -= 3;
        }
        result *= n;
        return result;
    }
};

//数学法
/*通过归纳法可知，n%3为0时，分为n/3个3相乘，积最大
n%3为1时，分为n/3-1个3相乘之后再乘以4，积最大
n%3为2时，分为n/3个3相乘之后再乘以2，积最大*/
// class Solution {
// public:
//     int integerBreak(int n) {
//         if(n<=3) return n-1;
//         int num=n%3;
//         int numof3=n/3;
//         if(num==0) return pow(3,numof3);
//         else if(num==1) return pow(3,numof3-1)*4;
//         else return pow(3,numof3)*2;
//     }
// };
