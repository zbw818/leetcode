/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
////递归法
// class Solution {
// public:
//     bool isSameTree(TreeNode* p, TreeNode* q) {
//         if(!p&&!q) return true;
//         if(!p||!q) return false;
//         if(p->val!=q->val) return false;
//         bool flag1=isSameTree(p->left,q->left);
//         bool flag2=isSameTree(p->right,q->right);
//         return flag1&&flag2;
//     }
// };

//迭代法
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(!p&&!q) return true;
        else if(!p||!q) return false;
        queue<TreeNode*>qe1;
        queue<TreeNode*>qe2;
        qe1.push(p);
        qe2.push(q);
        while(!qe1.empty()&&!qe2.empty()){
            TreeNode* node1=qe1.front();
            qe1.pop();
            TreeNode* node2=qe2.front();
            qe2.pop();
            
            if(node1->val!=node2->val) return false;
            // if(!node1->left&&node2->left) return false;
            // if(!node1->right&&node2->right) return false;
            if(node1->left==nullptr&&node2->left!=nullptr) return false;
            if(node1->left!=nullptr&&node2->left==nullptr) return false;
            if(node1->right==nullptr&&node2->right!=nullptr) return false;
            if(node1->right!=nullptr&&node2->right==nullptr) return false;
            

            if(node1->left) qe1.push(node1->left);
            if(node1->right) qe1.push(node1->right);
            if(node2->left) qe2.push(node2->left);
            if(node2->right) qe2.push(node2->right);
        }
        return true;
        //return qe1.empty()&&qe2.empty();
    }
};
