/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //迭代法
// class Solution {
// public:
//     bool hasPathSum(TreeNode* root, int targetSum) {
//         if(!root) return false;
//         stack<TreeNode*>st;
//         stack<int>sum;
//         st.push(root);
//         sum.push(root->val);
//         while(!st.empty()){
//             TreeNode* node=st.top();
//             st.pop();
//             int tem=sum.top();
//             sum.pop();
//             if(!node->left&&!node->right){
//                 if(tem==targetSum) return true;
//             }
//             if(node->left){
//                 st.push(node->left);
//                 sum.push(tem+node->left->val);
//             }
//             if(node->right){
//                 st.push(node->right);
//                 sum.push(tem+node->right->val);
//             }
//         }
//         return false;
//     }
// };
//递归法
class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        if(!root) return false;
        int result=0;
        result+=root->val;
        if(!root->left&&!root->right&&result==targetSum) return true;
        return hasPathSum(root->left,targetSum-result)||hasPathSum(root->right,targetSum-result);
    }
};
