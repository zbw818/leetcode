/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        queue<Node*>qe;
        if(root!=NULL) qe.push(root);
        while(!qe.empty()){
            int len=qe.size();
            Node* prenode;
            Node* node;
            for(int i=0;i<len;i++){
                node=qe.front();
                qe.pop();
                if(i==0) prenode=node;
                else{
                    prenode->next=node;
                    prenode=prenode->next;
                }
                if(node->left) qe.push(node->left);
                if(node->right) qe.push(node->right);
            }
            prenode->next=NULL;
        }
        return root;
    }
};
