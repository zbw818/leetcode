/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //递归法
//  class Solution {
// public:
//     TreeNode* searchBST(TreeNode* root, int val) {
//         if(!root||root->val==val) return root;
//         if(root->val>val) return searchBST(root->left,val);
//         if(root->val<val) return searchBST(root->right,val);
//         return NULL;
//     }
// };
// 迭代法一
// class Solution {
// public:
//     TreeNode* searchBST(TreeNode* root, int val) {
//         if(!root) return NULL;
//         queue<TreeNode*> que;
//         que.push(root);
//         while(!que.empty()){
//             TreeNode* node=que.front();
//             que.pop();
//             if(node->val==val) return node;
//             if(node->left) que.push(node->left);
//             if(node->right) que.push(node->right);
//         }
//         return NULL;
//     }
// };
// 迭代法二
class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        while(root){
            if(root->val<val) root=root->right;
            else if(root->val>val) root=root->left;
            else return root;
        }
        return NULL;
    }
};
