/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //迭代法
// class Solution {
// public:
//     int findBottomLeftValue(TreeNode* root) {
//         if(!root) return 0;
//         queue<TreeNode*>qe;
//         qe.push(root);
//         TreeNode* tem;
//         while(!qe.empty()){
//             int len=qe.size();
//             tem=qe.front();
//             for(int i=0;i<len;i++){
//                 TreeNode* node=qe.front();
//                 qe.pop();
//                 if(node->left) qe.push(node->left);
//                 if(node->right) qe.push(node->right);
//             }
//         }
//         return tem->val;
//     }
// };
//递归法
class Solution {
public:
    int maxdepth=INT_MIN;
    int result=0;
    void traversal(TreeNode* root, int leftdepth){
        if(!root->left&&!root->right){
            if(leftdepth>maxdepth){
                maxdepth=leftdepth;
                result=root->val;
            }
            return;
        }
        if(root->left){
            traversal(root->left,leftdepth+1);
        }
        if(root->right){
            traversal(root->right,leftdepth+1);
        }
        return;
    }
    int findBottomLeftValue(TreeNode* root) {
        traversal(root,0);
        return result;
        
    }
};
