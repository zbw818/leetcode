/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return root;
        if(root->val>key){
            root->left=deleteNode(root->left,key);
            return root;
        }
        if(root->val<key){
            root->right=deleteNode(root->right,key);
            return root;
        }
        if(root->val==key){
            if(!root->left&&!root->right) return NULL;
            if(!root->left) return root->right;
            if(!root->right) return root->left;

            //目标结点左右子树都存在

            //调整目标结点左子树,找到左子树的最大结点替换目标节点
            /*
            TreeNode* node=root->left;
            while(node->right) node=node->right;
            root->left=deleteNode(root->left,node->val);
            node->left=root->left;
            node->right=root->right;
            */
            
            //调整目标结点右子树,找到右子树的最小结点替换目标节点
            TreeNode* node=root->right;
            while(node->left) node=node->left;
            root->right=deleteNode(root->right,node->val);
            node->left=root->left;
            node->right=root->right;

            return node;
        }
        return root;
    }
};
