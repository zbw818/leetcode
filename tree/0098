/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// 数值中序遍历递归法
// class Solution {
// public:
//     long long maxvalue=LONG_MIN;
//     bool isValidBST(TreeNode* root) {
//         if(!root) return true;

//         bool leftflag=isValidBST(root->left);
//         if(maxvalue<root->val) maxvalue=root->val;
//         else return false;
//         bool rightflag=isValidBST(root->right);

//         return leftflag&&rightflag;
//     }
// };
//指针中序遍历递归法
// class Solution {
// public:
//     TreeNode* node=nullptr;
//     bool isValidBST(TreeNode* root) {
//         if(!root) return true;

//         bool leftflag=isValidBST(root->left);
//         if(node&&node->val>=root->val) return false;
//         node=root;
//         bool rightflag=isValidBST(root->right);

//         return leftflag&&rightflag;
//     }
// };
//迭代法
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        if(!root) return true;
        TreeNode* prenode=NULL;
        stack<TreeNode*> st;
        st.push(root);
        while(!st.empty()){
            TreeNode* node=st.top();
            if(node){
                st.pop();
                if(node->right) st.push(node->right);
                st.push(node);
                st.push(NULL);
                if(node->left) st.push(node->left);
            }
            else{
                st.pop();
                if(prenode&&st.top()->val<=prenode->val) return false;
                prenode=st.top();
                st.pop();
            }
        }
        return true;
    }
};
