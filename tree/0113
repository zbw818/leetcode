/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int> >result;
        if(!root) return result;
        vector<int>path;
        stack<TreeNode*>st;
        stack<int>sum;
        stack<vector<int> >cur;
        path.push_back(root->val);
        cur.push(path);
        st.push(root);
        sum.push(root->val);
        while(!st.empty()){
            TreeNode* node=st.top();
            st.pop();
            vector<int>tem=cur.top();
            cur.pop();
            int cursum=sum.top();
            sum.pop();
            if(!node->left&&!node->right&&cursum==targetSum) result.push_back(tem);
            if(node->right){
                st.push(node->right);
                sum.push(cursum+node->right->val);
                tem.push_back(node->right->val);
                cur.push(tem);
                tem.pop_back();
            }
            if(node->left){
                st.push(node->left);
                sum.push(cursum+node->left->val);
                tem.push_back(node->left->val);
                cur.push(tem);
                tem.pop_back();
            }
        }
        return result;
    }
};
