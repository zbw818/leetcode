/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //递归法一
// class Solution {
// public:
//     TreeNode* insertIntoBST(TreeNode* root, int val) {
//         TreeNode* node=new TreeNode(val);
//         if(!root) return node;
//         if(root->val>val) root->left=insertIntoBST(root->left,val);
//         if(root->val<val) root->right=insertIntoBST(root->right,val);
//         return root;
//      }
// };
 //递归法二
// class Solution {
// private:
//     TreeNode* parent=NULL;
//     void traversal(TreeNode* cur, int val) {
//         if (cur == NULL) {
//             TreeNode* node = new TreeNode(val);
//             if (val > parent->val) parent->right = node;
//             else parent->left = node;
//             return;
//         }
//         parent = cur;
//         if (cur->val > val) traversal(cur->left, val);
//         if (cur->val < val) traversal(cur->right, val);
//         return;
//     }

// public:
//     TreeNode* insertIntoBST(TreeNode* root, int val) {
//         if (root == NULL) {
//             root = new TreeNode(val);
//         }
//         traversal(root, val);
//         return root;
//     }
// };
//迭代法
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        TreeNode* node=new TreeNode(val);
        if (root == NULL) return node;
        TreeNode* cur=root;
        TreeNode* pre=NULL;
        while(cur){
            pre=cur;
            if(cur->val>val) cur=cur->left;
            else cur=cur->right;
        }
        if(pre->val>val) pre->left=node;
        else pre->right=node;        
        return root;
    }
};
