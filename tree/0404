/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //递归法
// class Solution {
// public:
//     int sumOfLeftLeaves(TreeNode* root) {
//         int result=0;
//         if(!root) return result;
//         if(root->left&&root->left->left==nullptr&&!root->left->right) result+=root->left->val;
//         result+=sumOfLeftLeaves(root->left);
//         result+=sumOfLeftLeaves(root->right);
//         return result;
//     }
// };
//迭代法
class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        int result=0;
        if(!root) return result;
        stack<TreeNode*>st;
        st.push(root);
        while(!st.empty()){
            int len=st.size();
            for(int i=0;i<len;i++){
                TreeNode* node=st.top();
                st.pop();
                if(node->left&&node->left->left==nullptr&&!node->left->right) result+=node->left->val;
                if(node->right) st.push(node->right);
                if(node->left) st.push(node->left);
            }
        }
        return result;
    }
};
