/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //递归法
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        if(!root1) return root2;
        if(!root2) return root1;
        
        if(root1&&root2) root1->val=root1->val+root2->val;
        root1->left=mergeTrees(root1->left,root2->left);
        root1->right=mergeTrees(root1->right,root2->right);

        return root1;
    }
};
//迭代法
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        if(root1==nullptr) return root2;
        if(!root2) return root1;
        queue<TreeNode*> que1;
        queue<TreeNode*> que2;
        que1.push(root1);
        que2.push(root2);
        while(!que1.empty()||!que2.empty()){
            TreeNode* node1=que1.front();
            que1.pop();
            TreeNode* node2=que2.front();
            que2.pop();
            node1->val+=node2->val;
            //左子树都存在
            if(node1->left&&node2->left){
                que1.push(node1->left);
                que2.push(node2->left);
            }
            //右子树都存在
            if(node1->right&&node2->right){
                que1.push(node1->right);
                que2.push(node2->right);
            }
            //root1左子树不存在，root2左子树存在，直接赋值
            if(!node1->left&&node2->left){
                node1->left=node2->left;
            }
            //root1右子树不存在，root2右子树存在
            if(!node1->right&&node2->right){
                node1->right=node2->right;
            }
        }
        return root1;
    }
};
