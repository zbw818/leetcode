/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 //广度优先遍历迭代法
// class Solution {
// public:
//     TreeNode* invertTree(TreeNode* root) {
//         queue<TreeNode*>qe;
//         if(root!=NULL) qe.push(root);
//         while(!qe.empty()){
//             int len=qe.size();
//             for(int i=0;i<len;i++){
//                 TreeNode* node=qe.front();
//                 qe.pop();
//                 swap(node->left,node->right);
//                 if(node->left) qe.push(node->left);
//                 if(node->right) qe.push(node->right);
//             }
//         }
//         return root;
//     }
// };

//深度优先遍历迭代法
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        stack<TreeNode*> st;
        if(root!=NULL) st.push(root);
        while(!st.empty()){
            TreeNode* node=st.top();
            st.pop();
            swap(node->left,node->right);
            // if(node->left) st.push(node->left);
            // if(node->right) st.push(node->right);
            if(node->right) st.push(node->right);
            if(node->left) st.push(node->left);
            
        }
        return root;
    }
};

//递归法
// class Solution {
// public:
//     TreeNode* invertTree(TreeNode* root) {
//         if(root==NULL) return root;
//         swap(root->left,root->right);
//         invertTree(root->left);
//         invertTree(root->right);
        
//         return root;
//     }
// };
