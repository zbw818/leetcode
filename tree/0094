/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 //递归法
// class Solution {
// public:
//     void traversal(TreeNode* node,vector<int>&v){
//         if(node!=NULL){
//             traversal(node->left,v);
//             v.push_back(node->val);
//             traversal(node->right,v);
//         }
//     }
//     vector<int> inorderTraversal(TreeNode* root) {
//         vector<int>result;
//         traversal(root,result);
//         return result;
//     }
// };

//迭代法一
// class Solution{
// public:
//     vector<int> inorderTraversal(TreeNode* root){
//         vector<int> result;
//         stack<TreeNode*> st;
//         TreeNode* cur=root;
//         while(cur!=NULL || !st.empty()){
//             if(cur!=NULL){
//                 st.push(cur);
//                 cur=cur->left;
//             }
//             else{
//                 cur=st.top();
//                 result.push_back(cur->val);
//                 st.pop();
//                 cur=cur->right;
//             }
//         }
//         return result;
//     }
// };

//迭代法二
class Solution{
public:
    vector<int> inorderTraversal(TreeNode* root){
        vector<int> result;
        stack<TreeNode*> st;
        if(root!=NULL) st.push(root);
        while(!st.empty()){
            TreeNode* node=st.top();
            if(node!=NULL){
                st.pop();
                if(node->right) st.push(node->right);
                st.push(node);
                st.push(NULL);
                if(node->left) st.push(node->left);
            }
            else{
                st.pop();
                result.push_back(st.top()->val);
                st.pop();
            }
        }
        return result;
    }
};
