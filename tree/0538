/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// class Solution {
// private:
//     void preSum(TreeNode* root,vector<int>& v,vector<int>& vec){
//         stack<TreeNode*> st;
//         vec.clear();
//         v.clear();
//         st.push(root);
//         while(!st.empty()){
//             TreeNode* node=st.top();
//             if(node){
//                 st.pop();
//                 if(node->right) st.push(node->right);
//                 st.push(node);
//                 st.push(NULL);
//                 if(node->left) st.push(node->left);
//             }
//             else{
//                 st.pop();
//                 v.push_back(st.top()->val);
//                 st.pop();
//             }
//         }
//         vec.resize(v.size()+1);
//         vec[0]=0;
//         for(int i=1;i<vec.size();i++){
//             vec[i]=vec[i-1]+v[i-1];
//         }
//     }
//     int valIndex(vector<int> v,int val){
//         int index=0;
//         for(int i=0;i<v.size();i++){
//             index++;
//             if(v[i]==val) break;
//         }
//         return index;
//     }
// public:
//     TreeNode* convertBST(TreeNode* root) {
//         if(!root) return nullptr;
//         vector<int> v;
//         vector<int> vec;
//         preSum(root,v,vec);
//         int len=vec.size();
//         queue<TreeNode*>que;
//         que.push(root);
//         while(!que.empty()){
//             TreeNode* node=que.front();
//             que.pop();
//             int index=valIndex(v,node->val);
//             node->val=vec[len-1]-vec[index-1];
//             if(node->left) que.push(node->left);
//             if(node->right) que.push(node->right);
//         }
//         return root;
//     }
// };

//递归法
// class Solution {
// public:
//     void traversal(TreeNode* node,int& preval){
//         if(!node) return;
//         traversal(node->right,preval);
//         node->val+=preval;
//         preval=node->val;
//         traversal(node->left,preval);
//     }
//     TreeNode* convertBST(TreeNode* root){
//         int pre=0;
//         traversal(root,pre);
//         return root;
//     }
// };

//迭代法
class Solution {
public:
    void traversal(TreeNode* node,int& preval){
        //if(!node) return;
        stack<TreeNode*> st;
        TreeNode* cur=node;
        while(cur||!st.empty()){
            if(cur){
                st.push(cur);
                cur=cur->right;
            }
            else{
                cur=st.top();
                cur->val+=preval;
                st.pop();
                preval=cur->val;
                cur=cur->left;
            }
        }
    }
    TreeNode* convertBST(TreeNode* root){
        int pre=0;
        traversal(root,pre);
        return root;
    }
};
