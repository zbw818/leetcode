/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //递归法
// class Solution {
// public:
//     TreeNode* sortedArrayToBST(vector<int>& nums) {
//         if(!nums.size()) return nullptr;
//         int rootIndex=nums.size()/2;
//         TreeNode* root=new TreeNode(nums[rootIndex]);
//         vector<int>left={nums.begin(),nums.begin()+rootIndex};
//         vector<int>right={nums.begin()+rootIndex+1,nums.end()};
//         root->left=sortedArrayToBST(left);
//         root->right=sortedArrayToBST(right);
//         return root;
//     }
// };
//迭代法
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if(!nums.size()) return nullptr;
        queue<TreeNode*> node;
        queue<int> leftIndex;
        queue<int> rightIndex;
        TreeNode* root=new TreeNode(0);
        node.push(root);
        leftIndex.push(0);
        rightIndex.push(nums.size()-1);
        while(!node.empty()){
            TreeNode* curNode=node.front();
            node.pop();
            int left=leftIndex.front();
            leftIndex.pop();
            int right=rightIndex.front();
            rightIndex.pop();
            int mid=left+(right-left)/2;

            curNode->val=nums[mid];

            if(left<mid){
                curNode->left=new TreeNode(0);
                node.push(curNode->left);
                leftIndex.push(left);
                rightIndex.push(mid-1);
            }
            if(right>mid){
                curNode->right=new TreeNode(0);
                node.push(curNode->right);
                leftIndex.push(mid+1);
                rightIndex.push(right);
            }
        }
        return root;
    }
};
