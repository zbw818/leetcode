/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxdepth(TreeNode* node){
        queue<TreeNode*>qe;
        if(node==nullptr) return 0;
        qe.push(node);
        int depth=0;
        while(!qe.empty()){
            int len=qe.size();
            for(int i=0;i<len;i++){
                TreeNode* tem=qe.front();
                qe.pop();
                if(tem->left) qe.push(tem->left);
                if(tem->right) qe.push(tem->right);
            }
            depth++;
        }
        return depth;
    }
    bool balanced(TreeNode* node){
        int leftdepth=maxdepth(node->left);
        int rightdepth=maxdepth(node->right);
        return abs(leftdepth-rightdepth)<2;
    }
    bool isBalanced(TreeNode* root) {
        if(root==nullptr) return true;
        bool flag1=balanced(root);
        bool flag2=isBalanced(root->left);
        bool flag3=isBalanced(root->right);
        return flag1&&flag2&&flag3;
    }
};

// class Solution {
// public:
//     int maxdepth(TreeNode* node){
//         if(node==nullptr) return 0;
//         return max(maxdepth(node->left),maxdepth(node->right))+1;
//     }
//     bool balanced(TreeNode* node){
//         int leftdepth=maxdepth(node->left);
//         int rightdepth=maxdepth(node->right);
//         return abs(leftdepth-rightdepth)<2;
//     }
//     bool isBalanced(TreeNode* root) {
//         if(root==nullptr) return true;
//         bool flag1=balanced(root);
//         bool flag2=isBalanced(root->left);
//         bool flag3=isBalanced(root->right);
//         return flag1&&flag2&&flag3;
//     }
// };

// class Solution {
// public:
//     int maxdepth(TreeNode* node){
//         if(node==nullptr) return 0;
//         return max(maxdepth(node->left),maxdepth(node->right))+1;
//     }
    
//     bool isBalanced(TreeNode* root){
//         if(!root) return true;
//         bool flag1=abs(maxdepth(root->left)-maxdepth(root->right))<2;
//         bool flag2=isBalanced(root->left);
//         bool flag3=isBalanced(root->right);
//         return flag1&&flag2&&flag3;
//     }
// };
