/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 //递归法
// class Solution {
// public:
//     void traversal(TreeNode* node,vector<int> &result){
//         if(node!=NULL){
//             result.push_back(node->val);
//             traversal(node->left,result);
//             traversal(node->right,result);
//         }
//     }
//     vector<int> preorderTraversal(TreeNode* root) {
//         vector<int>result;
//         traversal(root,result);
//         return result;
//     }
// };
//迭代法一
// class Solution {
// public:
//     vector<int> preorderTraversal(TreeNode* root) {
//         vector<int>result;
//         stack<TreeNode*>st;
//         if(root==NULL) return result;
//         st.push(root);
//         while(!st.empty()){
//             TreeNode* node=st.top();
//             st.pop();
//             result.push_back(node->val);
//             if(node->right) st.push(node->right);
//             if(node->left) st.push(node->left);
//         }
        
//         return result;
//     }
// };
//迭代法二
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int>result;
        stack<TreeNode*>st;
        if(root!=NULL) st.push(root);
        while(!st.empty()){
            TreeNode* node=st.top();
            if(node!=NULL){
                st.pop();
                if(node->right) st.push(node->right);
                if(node->left) st.push(node->left);
                st.push(node);
                st.push(NULL);
            }
            else{
                st.pop();
                result.push_back(st.top()->val);
                st.pop();
            }
        }
        return result;
    }
};
