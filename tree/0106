/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* traversal(vector<int>& inorder, vector<int>& postorder){
        if(postorder.empty()) return NULL;
        int rootval=postorder[postorder.size()-1];//后序最后一个是根节点
        TreeNode* node=new TreeNode(rootval);

        if(postorder.size()==1) return node;//叶子节点

        int rootindex;
        for(rootindex=0;rootindex<postorder.size();rootindex++){
            if(inorder[rootindex]==rootval) break;
        }
        //切分中序数组
        vector<int> leftinorder(inorder.begin(),inorder.begin()+rootindex);
        vector<int> rightinorder(inorder.begin()+rootindex+1,inorder.end());

        //更新后序数组并切分
        postorder.resize(postorder.size()-1);
        vector<int> leftpostorder(postorder.begin(),postorder.begin()+leftinorder.size());
        vector<int> rightpostorder(postorder.begin()+leftinorder.size(),postorder.end());

        node->left=traversal(leftinorder,leftpostorder);
        node->right=traversal(rightinorder,rightpostorder);

        return node;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.empty()||postorder.empty()) return NULL;
        return traversal(inorder,postorder);
    }
};
