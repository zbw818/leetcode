/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// class Solution {
// public:
//     int minDepth(TreeNode* root) {
//         int depth=0;
//         if(root==NULL) return 0;
//         queue<TreeNode*>qe;
//         qe.push(root);
//         while(!qe.empty()){
//             int len=qe.size();
//             depth+=1;
//             for(int i=0;i<len;i++){
//                 TreeNode* node=qe.front();
//                 qe.pop();
//                 if(node->left) qe.push(node->left);
//                 if(node->right) qe.push(node->right);
//                 if(!node->left&&!node->right) return depth;
//             }
//         }
//         return depth;
//     }
// };

//递归法
// class Solution {
// public:
//     int minDepth(TreeNode *root) {
//         if (root == nullptr) return 0;
//         if (root->left == nullptr && root->right == nullptr) return 1;
//         int min_depth = INT_MAX;
//         if (root->left != nullptr) min_depth = min(minDepth(root->left), min_depth);
//         if (root->right != nullptr) min_depth = min(minDepth(root->right), min_depth);
//         return min_depth + 1;
//     }
// };

class Solution {
public:
    int minDepth(TreeNode* root) {
      if (root==NULL) return 0;
      if (root->left==NULL&&root->right== NULL) return 1;
      int leftDepth=minDepth(root->left);
      int rightDepth=minDepth(root->right);
      if (root->left==NULL|| root->right==NULL) return 1+leftDepth+rightDepth;
      return 1+min(leftDepth, rightDepth);  
    }
};
