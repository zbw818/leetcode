/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// //递归法
// class Solution {
// public:
//     bool compare(TreeNode* left,TreeNode* right){
//         if(left==nullptr&&right!=NULL) return false;
//         else if(left!=NULL&&right==NULL) return false;
//         else if(left==NULL&&right==NULL) return true;
//         else if(left->val!=right->val) return false;
//         else{
//             bool flag1=compare(left->left,right->right);
//             bool flag2=compare(left->right,right->left);
//             return flag1&&flag2;
//         }
//     }
//     bool isSymmetric(TreeNode* root) {
//         if(root==NULL) return true;
//         return compare(root->left,root->right);
//     }
// };

//迭代法
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root==NULL) return true;
        queue<TreeNode*> qe;
        qe.push(root->left);
        qe.push(root->right); 
        while(!qe.empty()){
            TreeNode* node1=qe.front();
            qe.pop();
            TreeNode* node2=qe.front();
            qe.pop();
            if(!node1&&!node2) continue;
            if(!node1&&node2) return false;
            else if(node1&&!node2) return false;
            else if(node1->val != node2->val) return false;
            qe.push(node1->left);
            qe.push(node2->right);
            qe.push(node1->right);
            qe.push(node2->left);
        } 
        return true;      
    }
};
