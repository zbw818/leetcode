/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
// //通用递归法
// class Solution {
// public:
//     TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
//         if(root==q||root==p||root==nullptr) return root;
//         TreeNode* left=lowestCommonAncestor(root->left,p,q);
//         TreeNode* right=lowestCommonAncestor(root->right,p,q);
//         if(left&&right) return root;
//         if(left&&!right) return left;
//         return right;
//     }
// };
//使用二叉搜索树特性递归法一
// class Solution {
// public:
//     TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
//         if(root==q||root==p||root==nullptr) return root;
//         TreeNode* node;
//         if(root->val>p->val&&root->val>q->val) node=lowestCommonAncestor(root->left,p,q);
//         else if(root->val<p->val&&root->val<q->val) node=lowestCommonAncestor(root->right,p,q);
//         else return root;
//         return node;
//     }
// };
//使用二叉搜索树特性递归法二
// class Solution {
// public:
//     TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
//         if(root->val>p->val&&root->val>q->val) return lowestCommonAncestor(root->left,p,q);
//         else if(root->val<p->val&&root->val<q->val) return lowestCommonAncestor(root->right,p,q);
//         else return root;
//     }
// };
//迭代法
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        while(root){
            if(root->val>p->val&&root->val>q->val) root=root->left;
            else if(root->val<p->val&&root->val<q->val) root=root->right;
            else return root;
        }
        return NULL;
    }
};
