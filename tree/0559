/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
// //递归法
// class Solution {
// public:
//     int maxDepth(Node* root) {
//         if(root==nullptr) return 0;
//         int count=root->children.size();
//         int maxdepth=0;
//         for(int i=0;i<count;i++){
//             maxdepth=max(maxdepth,maxDepth(root->children[i]));
//         }        
//         return maxdepth+1;
//     }
// };

//迭代法
class Solution {
public:
    int maxDepth(Node* root) {
        if(root==nullptr) return 0;
        queue<Node*>qe;
        qe.push(root);
        int maxdepth=0;
        while(!qe.empty()){
            maxdepth++;
            int len=qe.size();
            for(int i=0;i<len;i++) {
                Node* node=qe.front();
                qe.pop();
                for(int j=0;j<node->children.size();j++) qe.push(node->children[j]);
            }
        }
        return maxdepth;
    }
};
