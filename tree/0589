/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
//递归法
// class Solution {
// public:
//     void traversal(Node* node,vector<int>& v){
//         if(node==NULL) return;
//         v.push_back(node->val);
//         for(auto ch:node->children){
//             traversal(ch,v);
//         }
//     }
//     vector<int> preorder(Node* root) {
//         vector<int> result;
//         traversal(root,result);
//         return result;
//     }
// };

//迭代法
class Solution {
public:
    vector<int> preorder(Node* root) {
        vector<int>result;
        stack<Node*>st;
        if(root==NULL) return result;
        st.push(root);
        while(!st.empty()){
            int len=st.size();
            for(int i=0;i<len;i++){
                Node* node=st.top();
                st.pop();
                result.push_back(node->val);
                for(auto tem=node->children.rbegin();tem!=node->children.rend();tem++){
                    if(*tem!=nullptr) st.push(*tem);
                }
            }
        }
        return result;
    }
};
