/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* traversal(vector<int>& nums){
        if(nums.empty()) return nullptr;
        int left=0;
        int right=nums.size();
        int maxindex=0;
        for(int i=1;i<right;i++){
            if(nums[i]>nums[maxindex]) maxindex=i;
        }

        vector<int> leftsubtree(nums.begin(),nums.begin()+maxindex);
        vector<int> rightsubtree(nums.begin()+maxindex+1,nums.end());

        TreeNode* node=new TreeNode(nums[maxindex]);
        node->left=traversal(leftsubtree);
        node->right=traversal(rightsubtree);

        return node;
    }
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        return traversal(nums);
    }
};
